{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to License Tracker","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"license_tracker/license_tracker/exceptions/","title":"Exceptions","text":""},{"location":"license_tracker/license_tracker/exporters/","title":"Exporters","text":""},{"location":"license_tracker/license_tracker/models/","title":"Models","text":""},{"location":"license_tracker/license_tracker/models/#license_tracker.models.Dependency","title":"<code>Dependency</code>  <code>dataclass</code>","text":"<p>Object that contains information about package</p> Source code in <code>license_tracker/models.py</code> <pre><code>@dataclass\nclass Dependency:\n\"\"\"\n    Object that contains information about package\n    \"\"\"\n    name: str\n    version: str\n    license_name: str\n    summary: str\n    project_url: URLTypes\n    licenses: list[License] = field(default_factory=list)\n\n    def __str__(self) -&gt; str:\n        return f\"{self.name} ({self.version})\"\n\n    @staticmethod\n    def parse_string(value: str) -&gt; tuple[str, Optional[str]]:\n        try:\n            name, version = value.strip().split(\"==\")\n        except ValueError:\n            # keep it simple, if version is not pinned, then let's assume it's not specified\n            name, version = value.strip(), None\n        return name.strip(), version.strip() if version else None\n</code></pre>"},{"location":"license_tracker/license_tracker/models/#license_tracker.models.License","title":"<code>License</code>  <code>dataclass</code>","text":"<p>Object that contains information about license file</p> Source code in <code>license_tracker/models.py</code> <pre><code>@dataclass\nclass License:\n\"\"\"\n    Object that contains information about license file\n    \"\"\"\n    filename: str\n    raw_content: str\n    url: URLTypes\n    sha: str\n</code></pre>"},{"location":"license_tracker/license_tracker/providers/","title":"Providers","text":""},{"location":"license_tracker/license_tracker/providers/#license_tracker.providers.GithubClient","title":"<code>GithubClient</code>","text":"<p>Provides methods to fetch data from Github</p> Source code in <code>license_tracker/providers.py</code> <pre><code>class GithubClient:\n\"\"\"\n    Provides methods to fetch data from Github\n    \"\"\"\n    def get_licenses(self, project_url: URLTypes, version: str) -&gt; list[models.License]:\n\"\"\"\n        Fetches license files from Github repository\n        \"\"\"\n        try:\n            license_files = self._fetch_license_files(project_url, version)\n        except HTTPStatusError:\n            raise exceptions.NoLicenseFound(\n                \"Could not fetch license files\", name=None, version=version\n            )\n\n        results = []\n        for license_file in license_files:\n            download_url = license_file[\"download_url\"]\n            raw_content = self._fetch_license_content(download_url)\n            results.append(\n                models.License(\n                    str(license_file[\"name\"]),\n                    str(raw_content),\n                    URL(download_url),\n                    str(license_file[\"sha\"]),\n                )\n            )\n        if not results:\n            raise exceptions.NoLicenseFound(\n                \"No licenses found in repo\", name=None, version=version\n            )\n        return results\n\n    @staticmethod\n    def _fetch_license_content(url: URLTypes) -&gt; str:\n        response = httpx.get(url)\n        response.raise_for_status()\n        return response.text\n\n    @staticmethod\n    def _fetch_license_files(\n        project_url: URLTypes, version: str, _failed: bool = False\n    ) -&gt; list[dict[str, Union[str, URL]]]:\n        url = str(project_url).replace(\"github.com\", \"api.github.com/repos\")\n        response = httpx.get(url + f\"contents?ref={version}\")\n        try:\n            response.raise_for_status()\n        except HTTPStatusError as e:\n            if response.status_code != 404 or _failed:\n                raise e\n            # Versioning might follow different naming than tags - try to fetch tags in\n            # hope of finding something that would resemble version - blame django-guardian\n            # TODO: add workaround for psycopg2 which uses 2_9_3 for version 2.9.3...\n            res = httpx.get(url + \"tags\")\n            res.raise_for_status()\n            for tag_object in res.json():\n                if version in tag_object[\"name\"]:\n                    return GithubClient._fetch_license_files(\n                        project_url, tag_object[\"name\"], _failed=True\n                    )\n        licenses = [\n            file for file in response.json() if \"license\" in file[\"name\"].lower()\n        ]\n        return licenses\n\n    def get_versioned_project_url(self, project_url: URLTypes, version: str) -&gt; URL:\n\"\"\"\n        Returns URL to specific version of project\n        \"\"\"\n        return URL(str(project_url) + f\"tree/{version}\")\n</code></pre>"},{"location":"license_tracker/license_tracker/providers/#license_tracker.providers.GithubClient.get_licenses","title":"<code>get_licenses(project_url, version)</code>","text":"<p>Fetches license files from Github repository</p> Source code in <code>license_tracker/providers.py</code> <pre><code>def get_licenses(self, project_url: URLTypes, version: str) -&gt; list[models.License]:\n\"\"\"\n    Fetches license files from Github repository\n    \"\"\"\n    try:\n        license_files = self._fetch_license_files(project_url, version)\n    except HTTPStatusError:\n        raise exceptions.NoLicenseFound(\n            \"Could not fetch license files\", name=None, version=version\n        )\n\n    results = []\n    for license_file in license_files:\n        download_url = license_file[\"download_url\"]\n        raw_content = self._fetch_license_content(download_url)\n        results.append(\n            models.License(\n                str(license_file[\"name\"]),\n                str(raw_content),\n                URL(download_url),\n                str(license_file[\"sha\"]),\n            )\n        )\n    if not results:\n        raise exceptions.NoLicenseFound(\n            \"No licenses found in repo\", name=None, version=version\n        )\n    return results\n</code></pre>"},{"location":"license_tracker/license_tracker/providers/#license_tracker.providers.GithubClient.get_versioned_project_url","title":"<code>get_versioned_project_url(project_url, version)</code>","text":"<p>Returns URL to specific version of project</p> Source code in <code>license_tracker/providers.py</code> <pre><code>def get_versioned_project_url(self, project_url: URLTypes, version: str) -&gt; URL:\n\"\"\"\n    Returns URL to specific version of project\n    \"\"\"\n    return URL(str(project_url) + f\"tree/{version}\")\n</code></pre>"},{"location":"license_tracker/license_tracker/providers/#license_tracker.providers.PypiClient","title":"<code>PypiClient</code>","text":"<p>Provides methods to fetch data from Pypi</p> Source code in <code>license_tracker/providers.py</code> <pre><code>class PypiClient:\n\"\"\"\n    Provides methods to fetch data from Pypi\n    \"\"\"\n    HOST: str = \"https://pypi.org/pypi/\"\n    VALID_PROJECT_URL_KEYS: Final[list[str]] = [\"Source\", \"Homepage\"]\n\n    def fetch_dependency_data(\n        self, name: str, version: Optional[str] = None\n    ) -&gt; models.Dependency:\n\"\"\"\n        Fetches dependency data from Pypi\n        \"\"\"\n        url = self._build_url(name, version)\n        response = self._call(url)\n        content = response.json()[\"info\"]\n        if version:\n            assert version == content[\"version\"]\n\n        project_url = self._get_project_url(content[\"project_urls\"])\n        return models.Dependency(\n            name=name,\n            version=content[\"version\"],\n            summary=content[\"summary\"],\n            project_url=GithubClient().get_versioned_project_url(\n                project_url, content[\"version\"]\n            ),\n            license_name=content[\"license\"],\n            licenses=GithubClient().get_licenses(project_url, content[\"version\"]),\n        )\n\n    @classmethod\n    def _build_url(cls, name: str, version: Optional[str] = None) -&gt; str:\n        if version:\n            return cls.HOST + f\"{name}/{version}/json\"\n        return cls.HOST + f\"{name}/json\"\n\n    @staticmethod\n    def _call(url: str) -&gt; Response:\n        response: Response = httpx.get(url)\n        response.raise_for_status()\n        return response\n\n    @classmethod\n    def _get_project_url(cls, project_urls: dict[str, URLTypes]) -&gt; URL:\n        pattern = r\"(?P&lt;url&gt;http[s]?://github\\.com/[-_\\w]+/[-_\\w]+).*\"\n        # TODO: add test for django-filter\n        for url in project_urls.values():\n            if url and (m := re.match(pattern, str(url))):\n                return URL(m.groupdict()[\"url\"] + \"/\")\n        raise Exception(\"Could not find project url\")\n</code></pre>"},{"location":"license_tracker/license_tracker/providers/#license_tracker.providers.PypiClient.fetch_dependency_data","title":"<code>fetch_dependency_data(name, version=None)</code>","text":"<p>Fetches dependency data from Pypi</p> Source code in <code>license_tracker/providers.py</code> <pre><code>def fetch_dependency_data(\n    self, name: str, version: Optional[str] = None\n) -&gt; models.Dependency:\n\"\"\"\n    Fetches dependency data from Pypi\n    \"\"\"\n    url = self._build_url(name, version)\n    response = self._call(url)\n    content = response.json()[\"info\"]\n    if version:\n        assert version == content[\"version\"]\n\n    project_url = self._get_project_url(content[\"project_urls\"])\n    return models.Dependency(\n        name=name,\n        version=content[\"version\"],\n        summary=content[\"summary\"],\n        project_url=GithubClient().get_versioned_project_url(\n            project_url, content[\"version\"]\n        ),\n        license_name=content[\"license\"],\n        licenses=GithubClient().get_licenses(project_url, content[\"version\"]),\n    )\n</code></pre>"},{"location":"license_tracker/license_tracker/services/","title":"Services","text":""}]}